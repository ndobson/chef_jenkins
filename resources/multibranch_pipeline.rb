property :job_name, String, name_property: true

property :description, String, default: 'Generated by Chef'
property :display_name, String

# These library definitions can be huge, so you'll have to put them in your own partial templates
property :libraries, Hash, default: {}
property :docker_label, String, default: ''
property :docker_url, String, default: ''
property :docker_creds_id, String, default: ''

property :discard_old_items, [true, false], default: true
property :days_to_keep, Integer, default: 0
property :num_to_keep, Integer, default: 0

property :periodic_scan, [true, false], default: true
property :scan_spec, String, default: 'H/12 * * * *' # Defaults to once a day
property :scan_interval, String, default: '300000'

# These library definitions can be huge, so you'll have to put them in your own partial templates
property :sources, Hash, default: {}

property :template, String, default: 'multibranch-pipeline-config.xml.erb'
property :include_templates, Array, default: []
property :auto_create_folders, [true, false], default: node['chef_jenkins']['auto_create_folders']

action :create do
  folder_name = ::File.dirname(new_resource.job_name)
  if new_resource.auto_create_folders && !folder_name.eql?('.')
    folder_name = ::File.dirname(new_resource.job_name)
    chef_jenkins_folder folder_name
  end

  xml = "#{Chef::Config[:file_cache_path]}/#{new_resource.job_name}.xml"

  directory ::File.dirname(xml) do
    recursive true
  end

  declare_resource(:template, xml) do
    source new_resource.template
    variables(
      description: new_resource.description,
      display_name: new_resource.display_name,

      libraries: new_resource.libraries,
      docker_label: new_resource.docker_label,
      docker_url: new_resource.docker_url,
      docker_creds_id: new_resource.docker_creds_id,

      discard_old_items: new_resource.discard_old_items,
      days_to_keep: new_resource.days_to_keep,
      num_to_keep: new_resource.num_to_keep,

      periodic_scan: new_resource.periodic_scan,
      scan_spec: new_resource.scan_spec,
      scan_interval: new_resource.scan_interval,

      sources: new_resource.sources,

      cookbook: new_resource.cookbook_name,
      include_templates: new_resource.include_templates
    )
    helpers(ChefJenkins::Helper)
    cookbook new_resource.include_templates.include?(new_resource.template) ? new_resource.cookbook_name : 'chef_jenkins'
  end

  jenkins_job new_resource.job_name do
    config xml
  end
end

action :delete do
  jenkins_job new_resource.job_name do
    action :delete
  end
end
